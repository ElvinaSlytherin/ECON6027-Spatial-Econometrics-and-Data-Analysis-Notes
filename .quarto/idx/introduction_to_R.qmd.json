{"title":"Introduction to R","markdown":{"headingText":"Introduction to R","containsRefs":false,"markdown":"\n## Install 'sf' package\n\nWhen we start up our project, we will need to make sure we install and load the necessary packages. The 'sf' package should already be installed so we just need to load the 'sf' package from our library using the following code:\n\n```{r}\nis.element('sf', installed.packages())\nlibrary(sf)\n```\n\n## Reading a shapefile, geojson, and csv data to R\n\nWhen we load the dataset, we will need to use the *st_read()* command so as to read the file to R. This applies for both shapefiles and geojson files.\n\n### Reading shapefile\n\n```{r}\nsg_pa = st_read(\"datasets/MP14_SUBZONE_WEB_PL.shp\")\n```\n\n### Reading geojson file\n\n```{r}\nsg_spt = st_read(\"datasets/SportSGSportFacilitiesGEOJSON.geojson\")\n```\n\n### Reading csv data\n\n```{r}\nfav = read.csv(\"datasets/1c_data.csv\")\nclass(fav)\nplot(fav)\n```\n\n::: callout-tip\nIt is important to note that while csv files are a spatial dataset, they do not have any \"spatial awareness\". Thus, we need to use the command `st_as_sf` with the \"coords\" argument that follows the cartesian coordinates convention (x,y).\n:::\n\n```{r}\nlibrary(sf)\n(fav.sf = st_as_sf(fav, coords=c(\"lon_x\",\"lat_y\")))\nplot(st_geometry(fav.sf), main=\"Bucket List\")\n```\n\n![CSV Data](images/W1_csv_data.png)\n\n::: callout-note\n-   One 'sfg' object contains only a [single]{style=\"color: yellow;\"} simple feature geometry\n-   A simple feature geometry column [('sfc')]{style=\"color: purple;\"} is a list of ['sfg'{style=\"color: red;\"} objects, which is additionally able to contain information about the coordinate system in use\n\nThis is important since 'sfc' represents the geometry column in **sf** data frames.\n:::\n\n::: callout-tip\n## How do I ensure R reads my files properly?\n\nIn case that your data set is not in the same folder as the Quarto file, use the file path instead to ensure that the file is read properly in R.\n:::\n\n## Inspecting our shapefile or geojson file\n\nNow that we have loaded our dataset, we will need to inspect the data as we will need to make sure that there are no false entries. These false entries could be due to overlapping polygons. As a habit, we should always check the validity especially if the dataset is downloaded from the Internet.\n\n::: callout-important\nAlways validate the dataset before we do anything else!\n:::\n\n```{r}\nclass(sg_pa)\nsummary(sg_pa)\nhead(sg_pa)\ntable(st_is_valid(sg_pa))\n```\n\n::: callout-note\n## What do the commands mean?\n\n-   `class(sg_pa)`: Used to determine the class of the object, e.g., data.frame.\n-   `summary(sg_pa)`: Calculates a 6-number summary including the minimum value, first quartile (25th percentile), median (50th percentile), mean, third quartile (75th percentile), and maximum value.\n-   `head(sg_pa)`: Inspects the first 6 rows of the dataset.\n-   `table(st_is_valid(sg_pa))`: Creates a table for the object and checks the validity of the object.\n:::\n\n### Validating objects due to false entries\n\nIf there are false entries, use the command *st_make_valid()* to validate the object.\n\n```{r}\nsg_pa = st_make_valid(sg_pa)\ntable(st_is_valid(sg_pa))\n```\n\n::: callout-note\n## What do the commands mean?\n\n-   `sg_pa = st_make_valid(sg_pa)`: Used for making the object valid.\n-   `table(st_is_valid(sg_pa))`: Used for creating a table from the newly validated object.\n:::\n\n## Visualize the shapefile and geojson file\n\nNow, we can visualize our dataset in the form of maps by using the *plot()* command. If there are many attributes in the dataset, we can use the *max.plot()* command together with the *plot()* command to limit the number of maps generated. If we wish to plot a map using a specific attribute, then we need to specify the attribute in the *plot()* command.\n\n### Shapefile\n\n```{r}\nplot(sg_pa, max.plot = 12)\nplot(sg_pa[\"PLN_AREA_N\"])\n```\n\n::: callout-note\n## What do the commands mean?\n\n-   `plot(sg_pa, max.plot = 12)`: Plots our object; the `max.plot` function generates the number of maps specified (e.g., 12).\n-   `plot(sg_pa[\"PLN_AREA_N\"])`: Plots our object based on the specified attribute we want (e.g., `PLN_AREA_N`).\n:::\n\n### geojson file\n\nBefore we can plot our dataset, we will need to extract the geometry for our geojson file. This is so that we can seoarate the spatial data freom other attribute information, allowing us to visualize, process, and interact with the geographic shapes (points, lines, polygons) using R. This process is necessary because geometry is what defines the map features, and extracting it provides a clean dataset for tasks like rendering maps, performing spatial analysis, or exchanging data between different platforms.\n\n```{r}\nst_geometry(sg_spt)\n```\n\n::: callout-note\n## What do the commands mean?\n\n-   `st_geometry(sg_spt)`: Extracts the geometry.\n:::\n\nAfter extracting the geometry, we can now plot the spatial data. To add colour to our plots, we can make use of the command *col = \"colour\"* as well as *border = \"colour\"* so that the plots are filled in colour. Additionally, the command *main = \"title\"* will create a title for the plot.\n\n```{r}\nplot(sg_spt$geometry, col = \"green\", border = \"darkblue\", main=\"SportSG Sport Facilities Locations\")\n```\n\nLastly, to load the plot of the dengue clusters on the Singapore map, we can make use of the library *tmap* as well as the command *tm_shape()*, which specifies the spatial data object or \"shape\" that serves as the base layer for creating a thematic map. Essentially, this defines the spatial context for subsequent map layers. Then, we use the *tm_polygons()* command to draw polygons on top of the map layer. Finally, to view the map that we have created, we use the command *tmap_mode()* where we can set the mode to *(i) plot*, which creates default and static maps, while *(ii) view* creates interactive maps that can be zoomed in and out, allow for changing background tiles (basemaps), or click on map objects to get some additional information.\n\n```{r}\nlibrary(tmap)\nsploc_map = tm_shape(sg_spt$geometry) + tm_polygons(col = \"green\")\ntmap_mode(\"view\")\nsploc_map\n```\n\n::: callout-note\n## What do the commands mean?\n\n-   `tmap` package is used for creating thematic maps.\n-   The following commands create a base map and an interactive view:\n    -   `tm_shape`: Specifies the spatial data object for the base layer and creates polygons on top of the map layer.\n    -   `tmap_mode`: Sets the created map to be an interactive map.\n:::\n\n## Working with csv data\n\nWe will need to install the package `spData` and load our csv dataset as an `sf` object. When we look at sf class datasets, we need to identify the difference between attributes and features.\n\n### Attributes vs Features\n\nAttribute data is “non-spatial” information associated with geographic (geometry) data.\n\n| Geometry Data (Spatial) | Attribute Data (Non-Spatial) |\n|---------------------------|---------------------------------------------|\n| A bus stop’s position would typically be represented by latitude and longitude coordinates (geometry data). | The name of the bus stop is an attribute of the feature (to use Simple Features terminology) that bears no relation to its geometry. |\n| The position of a specific grid cell in raster data. | The elevation value (attribute) for that specific grid cell. |\n\n### Feature types supported by sf\n\n![Feature types supported by `sf`](images/W1_feature_sf.png)\n\n#### Geometry Column\n\nThe geometry column gives the `sf` object its \"spatial awareness\". It is a list column that contains all the coordinates of the country polygons. When we strp the geometry data from an `sf` column, it reduces to a typical `data.frame`. We can observe this through the following example:\n\n##### Step 1: Loading and inspecting the \"world\" dataset\n\n```{r}\nworld = st_read(system.file(\"shapes/world.gpkg\", package=\"spData\"))\nworld\n```\n\n##### Step 2: Inspecting the dataset\n\n```{r}\ntable(st_is_valid(world))\nclass(world)\ndim(world) # 177 features, 11 attributes\nnames(world)\nsummary(world)\nhead(world)\n```\n\n##### Step 3: Removing geometry column from dataset\n\n```{r}\nworld$geom\nworld_df = st_drop_geometry(world)\nclass(world_df)\nhead(world_df)\n```\n\n##### Initial plots\n\n```{r}\n# plot(world)\nplot(world[3:6]) # plot of the world for attributes 3 to 6\n```\n\n##### Basic plot of the countries and continents based on column name\n\n```{r}\nplot(world[c(\"name_long\", \"continent\")]) # identify the columns using concatenate function to list into an array\n```\n\n### Spatial Dataset Manipulation\n\nIn this section we will see some important ways to manipulate a spatial dataset. Most of these commands can be applied to any dataset in general.\n\n#### Subsetting using base R functions \\[\\] or subset()\n\nThe following code chunk shows how to subset based on columns.\n\n```{r}\nworld[, 7:10] # Extract columns 7 to 10\nsummary(world[, 7:10]) # numerical summary of the columns\n```\n\nThe following code chunk allows subsetting based on certain criterion: lad area more than 5 million square km.\n\n##### Method 1\n\n```{r}\nl_area = world$area_km2 > 5000000\nclass(l_area)\ntable(l_area)\n(big_countries = world[l_area, ])\n```\n\n##### Method 2\n\n```{r}\n(big_countries = subset(world, area_km2 > 5000000)) # method 2\n```\n\nSince Antartica is not a country, we will remove it from the dataset.\n\n```{r}\n(big_countries = big_countries[-7, ]) # remove Antarctica\n```\n\nIn the next chunk, we will extract and highlight Asia (a specific geographic location) in a map. Using \\[\\] is one way to subset a dataset. Notice the resulting dataset is also an sf object.\n\n```{r}\ntable(world$continent)\nasia = world[world$continent == \"Asia\", ] \nplot(world[\"continent\"], reset = F) \nplot(asia, add = T, col = \"black\")\n```\n\n##### Plotting a country (e.g. Sri Lanka)\n\n```{r}\nworld$name_long \n(sl = world[world$name_long == \"Sri Lanka\", ])\nplot(asia$geom, main=\"Asia\")\nplot(st_geometry(sl), col = \"red\", add=T)\n```\n\nplot(st_geometry()) gives an outline of the geometry column.\n\n#### Attribute data aggregation\n\nAggregation operations summarise datasets by a ‘grouping variable’, typically an attribute column. In the following example, we aggregate the population by continent.\n\n```{r}\n(cont_pop = aggregate(pop ~ continent, FUN = sum, data = world, na.rm = T)); class(cont_pop) # output is a data.frame\n(cont_pop2 = aggregate(world['pop'], by = list(world$continent), FUN = sum, na.rm = T)); class(cont_pop2) # results in an sf output\n# (cont_pop2 = aggregate(world$pop, by = list(world$continent), FUN = sum, na.rm = T)); class(cont_pop2)\n```\n\n#### Attribute joining using \"key variable\"\n\nThe idea is to join data from different sources. This is useful when we want to “give” spatial awareness to a dataset. In the following example, we will use the \"coffee_data\" dataset from `spData` and join that to the \"world\" dataset using the key variable \"name_long\".\n\n```{r}\nlibrary(spData)\nsummary(coffee_data)\nclass(coffee_data)\nlibrary(dplyr)\n# left join\n(world_coffee = left_join(world, coffee_data))\nplot(world_coffee[\"coffee_production_2016\"])\n# inner join\n(world_coffee2 = inner_join(world, coffee_data)) \n```\n\n::: callout-note\nNotice the joining is done using the shared “key” variable “name_long”. By default, `dplyr` uses all variables with matching names. In this case, both world_coffee and world objects contained a variable called name_long, explaining the message Joining, by = \"name_long\". Where variable names are not the same, we have two options: \\* 1. Rename the key variable in one of the objects so they match, or \\* 2. Use the by argument to specify the joining variables.\n\nThe difference between the two functions is that `left_join()` fully preserves the features of the left dataset while `inner_join()` will find the common elements belonging to both datasets. We may choose the desired function based on the final dataset we need.\n:::\n\n#### Create new attributes\n\n```{r}\nworld_coffee$prod_yoy = (world_coffee$coffee_production_2017/world_coffee$coffee_production_2016 - 1)*100\nworld_coffee\n```\n","srcMarkdownNoYaml":""},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","output-file":"introduction_to_R.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.42","bibliography":["references.bib"],"nocite":"@*\n","editor":"visual","theme":["cosmo","brand"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}